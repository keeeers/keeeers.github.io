<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Blog Title</title><link>https://keeeers.github.io</link><description>Blog description</description><copyright>Blog Title</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://github.githubassets.com/favicons/favicon.svg</url><title>avatar</title><link>https://keeeers.github.io</link></image><lastBuildDate>Wed, 26 Jun 2024 08:38:35 +0000</lastBuildDate><managingEditor>Blog Title</managingEditor><ttl>60</ttl><webMaster>Blog Title</webMaster><item><title>Android签名证书与jre</title><link>https://keeeers.github.io/post/Android-qian-ming-zheng-shu-yu-jre.html</link><description># 使用JRE本地keystore Android证书&#13;
Android平台打包发布apk应用，需要使用数字证书（.keystore文件）进行签名，用于表明开发者身份。</description><guid isPermaLink="true">https://keeeers.github.io/post/Android-qian-ming-zheng-shu-yu-jre.html</guid><pubDate>Wed, 26 Jun 2024 08:38:14 +0000</pubDate></item><item><title>在Dify中添加自定义工具之mySQL执行器</title><link>https://keeeers.github.io/post/zai-Dify-zhong-tian-jia-zi-ding-yi-gong-ju-zhi-mySQL-zhi-xing-qi.html</link><description># 在Dify中添加自定义工具&#13;
## 准备工作&#13;
### 本地化部署Dify&#13;
参照Dify官方指导使用Docker Compose部署&#13;
```&#13;
https://docs.dify.ai/v/zh-hans/getting-started/install-self-hosted/docker-compose&#13;
```&#13;
**Step1** Clone Dify 源码&#13;
在合适的位置，文件管理器上方地址栏输入`cmd`，运行&#13;
```&#13;
git clone https://github.com/langgenius/dify.git&#13;
```&#13;
**Step2** Start Dify&#13;
进入dify的docker目录&#13;
```&#13;
cd dify/docker&#13;
```&#13;
一键启动&#13;
```&#13;
docker compose up -d&#13;
```&#13;
**Upgrade** &#13;
```&#13;
cd dify/docker&#13;
git pull origin main&#13;
docker compose down&#13;
docker compose pull&#13;
docker compose up -d &#13;
```&#13;
&#13;
### 使用python编写功能并暴露API&#13;
不过多赘述，可以使用FLASK或FASTAPI进行API暴露&#13;
```python&#13;
from flask import Flask, request, jsonify&#13;
import random&#13;
import pymysql&#13;
&#13;
app = Flask(__name__)&#13;
&#13;
def connect():&#13;
    conn = pymysql.connect(&#13;
        host='localhost',&#13;
        user=' your user name ',&#13;
        password='your mySQL password',&#13;
        database=' database name you want to use ',&#13;
        charset='utf8'&#13;
    )&#13;
    if conn.open:&#13;
        print('connected to database')&#13;
    else:&#13;
        print('failed to connect to database')&#13;
    return conn&#13;
&#13;
@app.route('/execute', methods=['POST'])&#13;
def execute_sql():&#13;
    sql = request.json.get('sql', None)&#13;
    if not sql:&#13;
        return jsonify({'error': 'SQL query is required'}), 400&#13;
    conn = connect()&#13;
    try:&#13;
        cursor = conn.cursor()&#13;
        cursor.execute(sql)&#13;
        conn.commit()&#13;
        backstr = cursor.fetchall()&#13;
        print(backstr)&#13;
        # Convert the result to a list of dictionaries&#13;
        return jsonify({'ans': backstr})&#13;
    except pymysql.Error as e:&#13;
        return jsonify({'error': str(e)}), 500&#13;
    finally:&#13;
        conn.close()&#13;
&#13;
if __name__ == '__main__':&#13;
    app.run(host='127.0.0.1', port=8001)&#13;
```&#13;
&#13;
### 使用ngrok进一步公示地址&#13;
这一步是因为本地化docker中部署Dify无法访问内网API，需要使用ngrok进行暴露。</description><guid isPermaLink="true">https://keeeers.github.io/post/zai-Dify-zhong-tian-jia-zi-ding-yi-gong-ju-zhi-mySQL-zhi-xing-qi.html</guid><pubDate>Fri, 21 Jun 2024 07:24:04 +0000</pubDate></item><item><title>博客测试</title><link>https://keeeers.github.io/post/bo-ke-ce-shi.html</link><description># 测试&#13;
## 简单测试markdown格式&#13;
### 以上是三种级别的标题&#13;
`print('hello world!')`&#13;
```python&#13;
str = 'hello world! :-&gt;'&#13;
print(str)&#13;
```。</description><guid isPermaLink="true">https://keeeers.github.io/post/bo-ke-ce-shi.html</guid><pubDate>Thu, 20 Jun 2024 06:35:06 +0000</pubDate></item><item><title>My first issues</title><link>https://keeeers.github.io/post/My%20first%20issues.html</link><description># 这是第一篇github博客&#13;
本博客使用了https://github.com/Meekdai/Gmeek构建。</description><guid isPermaLink="true">https://keeeers.github.io/post/My%20first%20issues.html</guid><pubDate>Thu, 20 Jun 2024 06:28:36 +0000</pubDate></item></channel></rss>